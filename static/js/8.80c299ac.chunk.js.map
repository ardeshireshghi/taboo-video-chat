{"version":3,"sources":["components/LoginForm/LoginForm.js","useCases/loginWithEmail.js","containers/Login.js","hooks/useEmailLogin.js","infrastructure/config.js","hooks/useAsyncSafeState.js","components/shared/CenteredContainer.js","components/shared/DefaultCard.js","components/shared/ButtonWithLoading.js","styles/colors.js"],"names":["ErrorMessage","styled","div","semanticColorTokens","signupErrorMessage","LoginForm","onSubmit","submitted","useForm","control","handleSubmit","useState","submitting","setSubmitting","useEffect","data","name","rules","required","pattern","render","field","onChange","onBlur","value","ref","fieldState","invalid","isTouched","error","htmlFor","size","id","valid","placeholder","innerRef","type","ButtonWithLoading","block","pill","theme","isLoading","loginWithEmail","a","email","config","getConfig","apiBaseUrl","Error","fetch","method","body","JSON","stringify","headers","response","ok","console","Login","useAsyncSafeState","loading","setLoading","setError","status","setStatus","submit","useCallback","useMemo","useEmailLogin","CenteredContainer","sm","order","offset","DefaultCard","formData","CONFIG_GLOBAL_KEY","window","Object","keys","length","REACT_APP_API_URL","chatPollIntervalSeconds","CHAT_POLL_INTERVAL","chatPollingTimeSeconds","intialValue","mountedRef","useRef","state","setState","current","update","Container","Card","attrs","outline","spinAnimation","keyframes","SpinAnimation","ButtonSpinnerWrapper","children","props","primary"],"mappings":"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","file":"static/js/8.80c299ac.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Form, FormInput, FormGroup } from 'shards-react';\nimport { Controller, useForm } from 'react-hook-form';\nimport { ButtonWithLoading } from '../shared/ButtonWithLoading';\nimport styled from 'styled-components';\nimport { semanticColorTokens } from '../../styles/colors';\n\nconst ErrorMessage = styled.div`\n  color: ${semanticColorTokens.signupErrorMessage};\n  font-size: 0.9rem;\n`;\n\nexport default function LoginForm({ onSubmit, submitted = false }) {\n  const { control, handleSubmit } = useForm();\n  const [submitting, setSubmitting] = useState(false);\n\n  const submitHandler = (data) => {\n    setSubmitting(true);\n    onSubmit(data);\n  };\n\n  useEffect(() => {\n    if (submitted) {\n      setSubmitting(false);\n    }\n  }, [setSubmitting, submitted]);\n\n  return (\n    <Form onSubmit={handleSubmit(submitHandler)}>\n      <FormGroup>\n        <Controller\n          control={control}\n          name=\"email\"\n          rules={{\n            required: true,\n            pattern: /^[^@ ]+@[^@ ]+\\.[^@ .]{2,}$/\n          }}\n          render={({\n            field: { onChange, onBlur, value, name, ref },\n            fieldState: { invalid, isTouched, error }\n          }) => {\n            return (\n              <>\n                <label htmlFor=\"#email\">Email</label>\n                <FormInput\n                  onBlur={onBlur}\n                  onChange={onChange}\n                  size=\"lg\"\n                  value={value}\n                  name={name}\n                  id={`#${name}`}\n                  valid={isTouched && !invalid}\n                  invalid={invalid}\n                  placeholder=\"e.g. john@email.com\"\n                  innerRef={ref}\n                />\n                {error && error.type === 'required' && (\n                  <ErrorMessage>Please tell us your email address</ErrorMessage>\n                )}\n\n                {error && error.type === 'pattern' && (\n                  <ErrorMessage>Email address is not valid</ErrorMessage>\n                )}\n              </>\n            );\n          }}\n        />\n      </FormGroup>\n      <FormGroup>\n        <ButtonWithLoading\n          size=\"lg\"\n          block\n          pill\n          type=\"submit\"\n          theme=\"success\"\n          isLoading={submitting}\n        >\n          Send link\n        </ButtonWithLoading>\n      </FormGroup>\n    </Form>\n  );\n}\n","import { getConfig } from '../infrastructure/config';\n\nexport async function loginWithEmail({ email }) {\n  try {\n    const config = getConfig();\n\n    if (!config.apiBaseUrl) {\n      throw new Error('apiBaseUrl is not set in config');\n    }\n\n    const response = await fetch(`${config.apiBaseUrl}/api/v1/magic-login`, {\n      method: 'POST',\n      body: JSON.stringify({ email }),\n      headers: {\n        'content-type': 'application/json'\n      }\n    });\n\n    if (!response.ok) {\n      console.error(response);\n      throw new Error('Error making request to login user');\n    }\n  } catch (err) {\n    console.error('Error sending email link to user', err);\n    throw err;\n  }\n}\n","import React from 'react';\nimport { CardTitle, CardBody, Row, Col, Alert } from 'shards-react';\n\nimport { LoginForm } from '../components/LoginForm';\nimport { CenteredContainer } from '../components/shared/CenteredContainer';\nimport { useEmailLogin } from '../hooks/useEmailLogin';\nimport { DefaultCard } from '../components/shared/DefaultCard';\n\nexport default function Login() {\n  const { submit, error, status } = useEmailLogin();\n\n  const handleSubmit = (formData) => {\n    submit(formData);\n  };\n\n  return (\n    <CenteredContainer>\n      <Row>\n        <Col sm={{ size: 12, order: 2, offset: 0 }}>\n          <DefaultCard>\n            <CardBody>\n              <CardTitle size=\"lg\">Login with email</CardTitle>\n              <LoginForm\n                onSubmit={handleSubmit}\n                submitted={status !== 'pending'}\n              />\n\n              {error && (\n                <Alert theme=\"danger\">\n                  There was a problem logging you in. Please try later\n                </Alert>\n              )}\n              {status === 'success' && (\n                <Alert theme=\"primary\">\n                  An email with the login link has been sent\n                </Alert>\n              )}\n            </CardBody>\n          </DefaultCard>\n        </Col>\n      </Row>\n    </CenteredContainer>\n  );\n}\n","import { useCallback } from 'react';\nimport { useMemo } from 'react';\nimport { loginWithEmail } from '../useCases/loginWithEmail';\nimport useAsyncSafeState from './useAsyncSafeState';\n\nexport function useEmailLogin() {\n  const [loading, setLoading] = useAsyncSafeState(false);\n  const [error, setError] = useAsyncSafeState(null);\n  const [status, setStatus] = useAsyncSafeState('pending');\n\n  const submit = useCallback(\n    async ({ email }) => {\n      setLoading(true);\n\n      try {\n        await loginWithEmail({ email });\n        setStatus('success');\n      } catch (err) {\n        setError(err);\n        setStatus('error');\n      } finally {\n        setLoading(false);\n      }\n    },\n    [setLoading, setError, setStatus]\n  );\n\n  return useMemo(\n    () => ({\n      loading,\n      error,\n      status,\n      submit\n    }),\n    [loading, error, submit, status]\n  );\n}\n","const CONFIG_GLOBAL_KEY = '__RUNTIME_CONFIG__';\nlet config = {};\n\nexport function getConfig() {\n  if (!(CONFIG_GLOBAL_KEY in window)) {\n    return config;\n  }\n\n  if (Object.keys(config).length === 0) {\n    config = {\n      apiBaseUrl: window[CONFIG_GLOBAL_KEY].REACT_APP_API_URL,\n      chatPollIntervalSeconds:\n        window[CONFIG_GLOBAL_KEY].CHAT_POLL_INTERVAL || 10,\n      chatPollingTimeSeconds: 300\n    };\n\n    delete window[CONFIG_GLOBAL_KEY];\n  }\n\n  return config;\n}\n","import { useRef, useEffect, useState, useCallback } from 'react';\n\nfunction useAsyncSafeState(intialValue) {\n  const mountedRef = useRef(false);\n  const [state, setState] = useState(intialValue);\n\n  useEffect(() => {\n    mountedRef.current = true;\n    return () => {\n      mountedRef.current = false;\n    };\n  }, []);\n\n  const safeSetState = useCallback(\n    (update) => {\n      if (mountedRef.current) {\n        setState(update);\n      }\n    },\n    [setState]\n  );\n\n  return [state, safeSetState];\n}\n\nexport default useAsyncSafeState;\n","import { Container } from 'shards-react';\nimport styled from 'styled-components';\n\nexport const CenteredContainer = styled(Container)`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n  gap: 1rem;\n  flex-wrap: wrap;\n  min-height: calc(100% - 92px);\n\n  > *:first-child {\n    flex-basis: auto;\n  }\n`;\n","import { Card } from 'shards-react';\nimport styled from 'styled-components';\n\nexport const DefaultCard = styled(Card).attrs({\n  outline: false\n})`\n  width: 400px;\n  max-width: 100%;\n`;\n","import React from 'react';\nimport { CgSpinner } from 'react-icons/cg';\nimport { Button } from 'shards-react';\nimport styled, { keyframes } from 'styled-components';\n\nconst spinAnimation = keyframes`\n  0% {\n    transform: rotateZ(0)\n  }\n\n  100% {\n    transform: rotateZ(360deg)\n  }\n`;\n\nconst SpinAnimation = styled.div`\n  animation: ${spinAnimation} infinite;\n  animation-duration: 1s;\n  animation-timing-function: linear;\n`;\nconst ButtonSpinnerWrapper = styled.div`\n  margin-left: 0.5rem;\n  display: inline-block;\n  line-height: 0;\n`;\n\nexport const ButtonWithLoading = ({\n  isLoading = false,\n  children,\n  ...props\n}) => {\n  return (\n    <Button {...props}>\n      {children}\n      {isLoading && (\n        <ButtonSpinnerWrapper>\n          <SpinAnimation>\n            <CgSpinner />\n          </SpinAnimation>\n        </ButtonSpinnerWrapper>\n      )}\n    </Button>\n  );\n};\n","export const colorTokens = {\n  green: '#17c671',\n  red: '#c4183c'\n};\n\nexport const semanticColorTokens = {\n  primary: colorTokens.green,\n  signupErrorMessage: colorTokens.red\n};\n"],"sourceRoot":""}