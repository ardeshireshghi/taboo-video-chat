{"version":3,"sources":["components/VideoChat/VideoChat.js","containers/VideoChat.js","infrastructure/config.js","hooks/useAsyncSafeState.js","components/shared/CenteredContainer.js","domain/Topic.js","domain/Chat.js","useCases/getUserChats.js","useCases/updateUserChat.js","hooks/useUserChat.js"],"names":["VideoChat","displayName","roomName","token","domain","videoContainerRef","useRef","jitsiApi","useEffect","current","options","width","height","parentNode","jwt","window","JitsiMeetExternalAPI","ref","VideoChatContainer","chatId","useParams","useAuth","getToken","getUser","tokenValue","value","useUserChat","updateChat","updatedChat","error","user","CenteredContainer","sm","size","order","replace","context","name","theme","CONFIG_GLOBAL_KEY","config","getConfig","Object","keys","length","apiBaseUrl","REACT_APP_API_URL","chatPollIntervalSeconds","CHAT_POLL_INTERVAL","chatPollingTimeSeconds","useAsyncSafeState","intialValue","mountedRef","useState","state","setState","useCallback","update","styled","Container","Topic","id","this","ChatState","Pending","PartialJoin","Fullfilled","Chat","topic","users","createdAt","updatedAt","Date","toDomain","chats","map","chat","getUserChats","authService","a","accessToken","Error","fetch","method","headers","Authorization","response","ok","console","json","apiChatToDomain","updateUserChat","loading","setLoading","setError","userChats","setChats","undefined","setUpdatedChat","getChats","useMemo"],"mappings":"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","file":"static/js/9.a7742289.chunk.js","sourcesContent":["import React, { useEffect } from 'react';\nimport { useRef } from 'react';\n\nconst JITSI_APP_NAME = 'vpaas-magic-cookie-15ba2c1858914be4913bfa73a6d28bc2';\n\nexport const VideoChat = ({\n  displayName,\n  roomName,\n  token,\n  domain = '8x8.vc'\n}) => {\n  const videoContainerRef = useRef(null);\n  const jitsiApi = useRef(null);\n\n  useEffect(() => {\n    if (videoContainerRef.current && !jitsiApi.current) {\n      const options = {\n        roomName: `${JITSI_APP_NAME}/${roomName}`,\n        width: 800,\n        height: 800,\n        displayName,\n        parentNode: videoContainerRef.current,\n        jwt: token\n      };\n\n      jitsiApi.current = new window.JitsiMeetExternalAPI(domain, options);\n    }\n  }, [videoContainerRef, displayName, roomName, token, domain]);\n\n  return <div ref={videoContainerRef}></div>;\n};\n\nexport default VideoChat;\n","import React from 'react';\nimport { Row, Col, Alert } from 'shards-react';\n\nimport { VideoChat } from '../components/VideoChat';\n\nimport { useParams } from 'react-router-dom';\nimport { CenteredContainer } from '../components/shared/CenteredContainer';\nimport { useAuth } from '../context/AuthContext';\nimport { useUserChat } from '../hooks/useUserChat';\nimport { useEffect } from 'react';\n\nexport default function VideoChatContainer() {\n  let { chatId } = useParams();\n  const { getToken, getUser } = useAuth();\n  const { value: tokenValue } = getToken();\n  const { updateChat, updatedChat, error } = useUserChat();\n\n  const user = getUser();\n\n  useEffect(() => {\n    updateChat(chatId);\n  }, [chatId, updateChat]);\n\n  return (\n    <CenteredContainer>\n      {updatedChat && (\n        <Row>\n          <Col sm={{ size: 12, order: 2 }}>\n            <VideoChat\n              roomName={chatId.replace(/-/g, '')}\n              displayName={user.context.user.name}\n              token={tokenValue}\n            />\n          </Col>\n        </Row>\n      )}\n      {error && (\n        <Alert theme=\"danger\">\n          There was a problem join the chat. Please try again later\n        </Alert>\n      )}\n    </CenteredContainer>\n  );\n}\n","const CONFIG_GLOBAL_KEY = '__RUNTIME_CONFIG__';\nlet config = {};\n\nexport function getConfig() {\n  if (!(CONFIG_GLOBAL_KEY in window)) {\n    return config;\n  }\n\n  if (Object.keys(config).length === 0) {\n    config = {\n      apiBaseUrl: window[CONFIG_GLOBAL_KEY].REACT_APP_API_URL,\n      chatPollIntervalSeconds:\n        window[CONFIG_GLOBAL_KEY].CHAT_POLL_INTERVAL || 10,\n      chatPollingTimeSeconds: 300\n    };\n\n    delete window[CONFIG_GLOBAL_KEY];\n  }\n\n  return config;\n}\n","import { useRef, useEffect, useState, useCallback } from 'react';\n\nfunction useAsyncSafeState(intialValue) {\n  const mountedRef = useRef(false);\n  const [state, setState] = useState(intialValue);\n\n  useEffect(() => {\n    mountedRef.current = true;\n    return () => {\n      mountedRef.current = false;\n    };\n  }, []);\n\n  const safeSetState = useCallback(\n    (update) => {\n      if (mountedRef.current) {\n        setState(update);\n      }\n    },\n    [setState]\n  );\n\n  return [state, safeSetState];\n}\n\nexport default useAsyncSafeState;\n","import { Container } from 'shards-react';\nimport styled from 'styled-components';\n\nexport const CenteredContainer = styled(Container)`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n  gap: 1rem;\n  flex-wrap: wrap;\n  min-height: calc(100% - 92px);\n\n  > *:first-child {\n    flex-basis: auto;\n  }\n`;\n","export class Topic {\n  constructor(id, name) {\n    this.id = id;\n    this.name = name;\n  }\n}\n","export const ChatState = {\n  Pending: 'pending',\n  PartialJoin: 'partial_join',\n  Fullfilled: 'fullfilled'\n};\n\nexport class Chat {\n  constructor(id, { topic, users, state, createdAt, updatedAt }) {\n    this.id = id;\n    this.topic = topic;\n    this.users = users;\n    this.state = state;\n    this.createdAt = new Date(createdAt);\n    this.updatedAt = new Date(updatedAt);\n  }\n}\n","import { Chat } from '../domain/Chat';\nimport { Topic } from '../domain/Topic';\n\nimport { getConfig } from '../infrastructure/config';\n\nfunction toDomain(chats) {\n  return chats.map((chat) => {\n    const topic = new Topic(chat.topic.id, chat.topic.name);\n\n    return new Chat(chat.id, {\n      ...chat,\n      topic\n    });\n  });\n}\nexport async function getUserChats(authService) {\n  try {\n    const config = getConfig();\n    const accessToken = authService.getToken().value;\n\n    if (!config.apiBaseUrl) {\n      throw new Error('apiBaseUrl is not set in config');\n    }\n\n    const response = await fetch(`${config.apiBaseUrl}/api/v1/chat`, {\n      method: 'GET',\n      headers: {\n        'content-type': 'application/json',\n        Authorization: `Bearer ${accessToken}`\n      }\n    });\n\n    if (!response.ok) {\n      console.error(response);\n      throw new Error('Error making request to fetch user chats');\n    }\n    const chats = await response.json();\n\n    return toDomain(chats);\n  } catch (err) {\n    console.error('Error fetching chats', err);\n    throw err;\n  }\n}\n","import { Chat } from '../domain/Chat';\nimport { Topic } from '../domain/Topic';\n\nimport { getConfig } from '../infrastructure/config';\n\nfunction apiChatToDomain(chat) {\n  const topic = new Topic(chat.topic.id, chat.topic.name);\n\n  return new Chat(chat.id, {\n    ...chat,\n    topic\n  });\n}\n\nexport async function updateUserChat(chatId, authService) {\n  try {\n    const config = getConfig();\n    const accessToken = authService.getToken().value;\n\n    if (!config.apiBaseUrl) {\n      throw new Error('apiBaseUrl is not set in config');\n    }\n\n    const response = await fetch(`${config.apiBaseUrl}/api/v1/chat/${chatId}`, {\n      method: 'PUT',\n      headers: {\n        'content-type': 'application/json',\n        Authorization: `Bearer ${accessToken}`\n      }\n    });\n\n    if (!response.ok) {\n      console.error(response);\n      throw new Error(`Error updating user chat id ${chatId}`);\n    }\n    const updatedChat = await response.json();\n\n    return apiChatToDomain(updatedChat);\n  } catch (err) {\n    console.error('Error updating chat', err);\n    throw err;\n  }\n}\n","import { useCallback } from 'react';\nimport { useMemo } from 'react';\nimport { useAuth } from '../context/AuthContext';\nimport { getUserChats } from '../useCases/getUserChats';\nimport { updateUserChat } from '../useCases/updateUserChat';\nimport useAsyncSafeState from './useAsyncSafeState';\n\nexport function useUserChat() {\n  const [loading, setLoading] = useAsyncSafeState(false);\n  const [error, setError] = useAsyncSafeState(null);\n  const [userChats, setChats] = useAsyncSafeState([]);\n  const [updatedChat, setUpdatedChat] = useAsyncSafeState(undefined);\n  const authService = useAuth();\n\n  const getChats = useCallback(async () => {\n    setLoading(true);\n\n    try {\n      const userChats = await getUserChats(authService);\n      setChats(userChats);\n    } catch (err) {\n      setError(err);\n    } finally {\n      setLoading(false);\n    }\n  }, [setLoading, setError, authService, setChats]);\n\n  const updateChat = useCallback(\n    async (chatId) => {\n      setLoading(true);\n\n      try {\n        const updatedChat = await updateUserChat(chatId, authService);\n        setUpdatedChat(updatedChat);\n      } catch (err) {\n        setError(err);\n      } finally {\n        setLoading(false);\n      }\n    },\n    [setLoading, setError, authService, setUpdatedChat]\n  );\n\n  return useMemo(\n    () => ({\n      loading,\n      error,\n      getChats,\n      userChats,\n      updateChat,\n      updatedChat\n    }),\n    [loading, error, getChats, updateChat, userChats, updatedChat]\n  );\n}\n"],"sourceRoot":""}