{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","../../src/utils/isCheckBoxInput.ts","../../src/utils/isDateObject.ts","../../src/utils/isNullOrUndefined.ts","../../src/utils/isObject.ts","../../src/logic/getNodeParentName.ts","../../src/logic/isNameInFieldArray.ts","../../src/utils/compact.ts","../../src/utils/isUndefined.ts","../../src/utils/get.ts","../../src/constants.ts","../../src/utils/omit.ts","../../src/useFormContext.tsx","../../src/logic/getProxyFormState.ts","../../src/utils/isEmptyObject.ts","../../src/logic/shouldRenderFormState.ts","../../src/utils/convertToArrayPayload.ts","../../src/utils/isKey.ts","../../src/utils/stringToPath.ts","../../src/utils/set.ts","../../src/useController.ts","../../src/useFormState.ts","../../src/logic/getControllerValue.ts","../../src/controller.tsx","../../src/logic/appendErrors.ts","../../src/logic/focusFieldBy.ts","../../src/utils/cloneObject.ts","../../src/utils/isPrimitive.ts","../../src/utils/deepEqual.ts","../../src/utils/getValidationModes.ts","../../src/utils/isBoolean.ts","../../src/utils/isFileInput.ts","../../src/utils/isFunction.ts","../../src/utils/isHTMLElement.ts","../../src/utils/isMultipleSelect.ts","../../src/utils/isRadioInput.ts","../../src/utils/isRadioOrCheckbox.ts","../../src/utils/isString.ts","../../src/utils/isWeb.ts","../../src/utils/live.ts","../../src/utils/omitKeys.ts","../../src/utils/Subject.ts","../../src/utils/unset.ts","../../src/logic/getCheckboxValue.ts","../../src/logic/getFieldValueAs.ts","../../src/logic/getRadioValue.ts","../../src/logic/getFieldValue.ts","../../src/logic/getMultipleSelectValue.ts","../../src/logic/getResolverOptions.ts","../../src/logic/hasValidation.ts","../../src/utils/deepMerge.ts","../../src/logic/setFieldArrayDirtyFields.ts","../../src/logic/skipValidation.ts","../../src/logic/unsetEmptyArray.ts","../../src/utils/isMessage.ts","../../src/utils/isRegex.ts","../../src/logic/getValidateError.ts","../../src/logic/getValueAndMessage.ts","../../src/logic/validateField.ts","../../src/logic/createFormControl.ts","../../src/useForm.ts"],"names":["_createForOfIteratorHelper","o","allowArrayLike","it","Symbol","iterator","Array","isArray","unsupportedIterableToArray","length","i","F","s","n","done","value","e","_e","f","TypeError","err","normalCompletion","didErr","step","next","_e2","_toConsumableArray","arr","arrayLikeToArray","iter","Object","from","element","type","data","Date","isObjectType","isNullOrUndefined","isDateObject","name","substring","search","names","some","current","getNodeParentName","filter","Boolean","val","undefined","obj","path","defaultValue","isObject","result","compact","split","reduce","key","isUndefined","EVENTS","VALIDATION_MODE","INPUT_VALIDATION_RULES","source","copy","FormContext","displayName","formState","_proxyFormState","localProxyFormState","isRoot","createGetter","prop","defineProperty","get","keys","formStateData","omit","isEmptyObject","find","test","input","replace","set","object","index","tempPath","isKey","stringToPath","lastIndex","newValue","objValue","isNaN","useController","props","methods","control","shouldUnregister","_formValues","_defaultValues","setInputStateValue","disabled","nameRef","_formState","updateFormState","_localProxyFormState","isDirty","dirtyFields","touchedFields","isValidating","isValid","errors","formStateSubscription","_subjects","state","subscribe","convertToArrayPayload","includes","shouldRenderFormState","unsubscribe","getProxyFormState","useFormState","registerProps","register","rules","updateMounted","field","_fields","_f","mount","controllerSubscription","values","_shouldUnregisterField","_shouldUnregister","_names","array","_isInAction","unregister","onChange","event","target","isCheckBoxInput","checked","getControllerValue","onBlur","ref","elm","focus","setCustomValidity","message","reportValidity","fieldState","invalid","isTouched","error","Controller","render","validateAllFieldCriteria","types","focusFieldBy","fields","callback","fieldsNames","refs","cloneObject","getTime","deepEqual","object1","object2","isPrimitive","keys1","keys2","val1","val2","mode","isOnSubmit","isOnBlur","isOnChange","isOnAll","isOnTouch","HTMLElement","isRadioInput","window","document","isHTMLElement","contains","keyName","map","tearDowns","tearDown","this","push","teardown","observer","subscription","closed","add","observers","subscriber","unset","previousObjRef","updatePath","childObject","slice","baseGet","k","objectRef","currentPaths","currentPathsLength","item","isBoolean","defaultResult","validResult","options","option","attributes","valueAsNumber","valueAsDate","setValueAs","NaN","defaultReturn","previous","getFieldValue","every","isFileInput","files","getRadioValue","isMultipleSelect","selected","isCheckBox","getCheckboxValue","getFieldValueAs","_fieldss","criteriaMode","shouldUseNativeValidation","required","min","max","maxLength","minLength","pattern","validate","deepMerge","targetValue","sourceValue","setDirtyFields","defaultValues","parentNode","parentName","isBlurEvent","isSubmitted","reValidateMode","isString","RegExp","getValidateError","validationData","isRegex","inputValue","a","inputRef","setCustomValidty","isRadio","isRadioOrCheckbox","isEmpty","appendErrorsCurry","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","getValueAndMessage","maxOutput","minOutput","valueDate","exceedMin","valueNumber","parseFloat","maxLengthOutput","minLengthOutput","patternValue","match","isFunction","validateError","validationResult","defaultOptions","shouldFocusError","isWindowUndefined","createFormControl","_delayCallback","formOptions","submitCount","isSubmitting","isSubmitSuccessful","_isMounted","_timer","Set","unMount","watch","_validateCount","validationMode","getValidationModes","isValidateAllFieldCriteria","debounce","wait","args","clearTimeout","setTimeout","isFieldWatched","watchAll","has","updateErrorState","shouldRenderBaseOnError","shouldSkipRender","previousError","shouldUpdateValid","delayError","updatedFormState","setFieldValue","shouldRender","fieldValue","isWeb","forEach","selectRef","checkboxRef","radioRef","getValues","shouldDirty","shouldTouch","updateTouchAndDirtyState","shouldValidate","trigger","isCurrentTouched","isChanged","previousIsDirty","_getIsDirty","isPreviousFieldDirty","isCurrentFieldDirty","isPreviousFieldTouched","executeResolver","resolver","context","executeResolverValidation","validateForm","shouldCheckValid","valid","validateField","fieldError","handleChange","inputType","shouldSkipValidation","hasValidation","deps","skipValidation","isWatched","parentNodeName","valError","_updateValid","_updateValidAndInputValue","shouldSkipValueAs","defaultChecked","skipRender","setValues","entries","fieldKey","fieldName","_getWatch","fieldNames","isGlobal","fieldValues","_updateValues","_updateFieldArray","method","output","updatedFieldArrayValuesWithKey","shouldSet","shouldSetFields","updatedFieldArrayValues","omitKeys","argA","argB","unsetEmptyArray","setFieldArrayDirtyFields","omitKey","_getFieldArrayValue","setValue","isFieldArray","schemaResult","Promise","all","shouldFocus","clearErrors","inputName","setError","info","delete","keepValue","keepError","keepDirty","keepTouched","keepDefaultValue","keepIsValid","registerFieldRef","fieldRef","querySelectorAll","isRadioOrCheckboxFunction","handleSubmit","onValid","onInvalid","preventDefault","persist","hasNoPromiseError","reset","formValues","keepStateOptions","updatedValues","keepValues","closest","keepDefaultValues","keepSubmitCount","keepIsSubmitted","keepErrors","setFocus","_removeFields","live","_updateProps","useForm","_formControl"],"mappings":"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","file":"static/js/2.71335963.chunk.js","sourcesContent":["import unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nexport default function _createForOfIteratorHelper(o, allowArrayLike) {\n  var it;\n\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (it = unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = o[Symbol.iterator]();\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}","import arrayWithoutHoles from \"@babel/runtime/helpers/esm/arrayWithoutHoles\";\nimport iterableToArray from \"@babel/runtime/helpers/esm/iterableToArray\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableSpread from \"@babel/runtime/helpers/esm/nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"@babel/runtime/helpers/esm/arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'checkbox';\n","export default (data: unknown) => data instanceof Date;\n","export default (value: unknown): value is null | undefined => value == null;\n","import isDateObject from './isDateObject';\nimport isNullOrUndefined from './isNullOrUndefined';\n\nexport const isObjectType = (value: unknown) => typeof value === 'object';\n\nexport default <T extends object>(value: unknown): value is T =>\n  !isNullOrUndefined(value) &&\n  !Array.isArray(value) &&\n  isObjectType(value) &&\n  !isDateObject(value);\n","export default (name: string) => name.substring(0, name.search(/.\\d/)) || name;\n","import { InternalFieldName } from '../types';\n\nimport getNodeParentName from './getNodeParentName';\n\nexport default (names: Set<InternalFieldName>, name: InternalFieldName) =>\n  [...names].some((current) => getNodeParentName(name) === current);\n","export default (value: any[]) => value.filter(Boolean);\n","export default (val: unknown): val is undefined => val === undefined;\n","import compact from './compact';\nimport isNullOrUndefined from './isNullOrUndefined';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\n\nexport default <T extends unknown>(\n  obj: T,\n  path: string,\n  defaultValue?: unknown,\n) => {\n  if (isObject(obj) && path) {\n    const result = compact(path.split(/[,[\\].]+?/)).reduce(\n      (result, key) => (isNullOrUndefined(result) ? result : result[key]),\n      obj,\n    );\n\n    return isUndefined(result) || result === obj\n      ? isUndefined(obj[path as keyof T])\n        ? defaultValue\n        : obj[path as keyof T]\n      : result;\n  }\n\n  return undefined;\n};\n","import { ValidationMode } from './types';\n\nexport const EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change',\n};\n\nexport const VALIDATION_MODE: ValidationMode = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all',\n};\n\nexport const INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate',\n};\n","export default <Key extends string, T extends Record<Key, any>>(\n  source: T,\n  key: Key,\n): Omit<T, Key> => {\n  const copy = { ...source };\n  delete copy[key];\n\n  return copy;\n};\n","import * as React from 'react';\n\nimport omit from './utils/omit';\nimport { FieldValues, FormProviderProps, UseFormReturn } from './types';\n\nconst FormContext = React.createContext<UseFormReturn | null>(null);\n\nFormContext.displayName = 'RHFContext';\n\nexport const useFormContext = <\n  TFieldValues extends FieldValues,\n>(): UseFormReturn<TFieldValues> =>\n  React.useContext(FormContext) as unknown as UseFormReturn<TFieldValues>;\n\nexport const FormProvider = <\n  TFieldValues extends FieldValues,\n  TContext extends object = object,\n>(\n  props: FormProviderProps<TFieldValues, TContext>,\n) => (\n  <FormContext.Provider\n    value={omit(props, 'children') as unknown as UseFormReturn}\n  >\n    {props.children}\n  </FormContext.Provider>\n);\n","import { VALIDATION_MODE } from '../constants';\nimport { FormState, FormStateProxy, ReadFormState } from '../types';\n\nexport default <TFieldValues>(\n  formState: FormState<TFieldValues>,\n  _proxyFormState: ReadFormState,\n  localProxyFormState?: ReadFormState,\n  isRoot = true,\n) => {\n  function createGetter(prop: keyof FormStateProxy) {\n    return () => {\n      if (prop in formState) {\n        if (_proxyFormState[prop] !== VALIDATION_MODE.all) {\n          _proxyFormState[prop] = !isRoot || VALIDATION_MODE.all;\n        }\n        localProxyFormState && (localProxyFormState[prop] = true);\n        return formState[prop];\n      }\n      return undefined;\n    };\n  }\n\n  const result = {} as any as typeof formState;\n  for (const key in formState) {\n    Object.defineProperty(result, key, {\n      get: createGetter(key as keyof FormStateProxy),\n    });\n  }\n\n  return result;\n};\n","import { EmptyObject } from '../types';\n\nimport isObject from './isObject';\n\nexport default (value: unknown): value is EmptyObject =>\n  isObject(value) && !Object.keys(value).length;\n","import { VALIDATION_MODE } from '../constants';\nimport { ReadFormState } from '../types';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport omit from '../utils/omit';\n\nexport default <T extends Record<string, any>, K extends ReadFormState>(\n  formStateData: T,\n  _proxyFormState: K,\n  isRoot?: boolean,\n) => {\n  const formState = omit(formStateData, 'name');\n\n  return (\n    isEmptyObject(formState) ||\n    Object.keys(formState).length >= Object.keys(_proxyFormState).length ||\n    Object.keys(formState).find(\n      (key) =>\n        _proxyFormState[key as keyof ReadFormState] ===\n        (!isRoot || VALIDATION_MODE.all),\n    )\n  );\n};\n","export default <T extends unknown>(value: T) =>\n  Array.isArray(value) ? value : [value];\n","export default (value: string) => /^\\w*$/.test(value);\n","import compact from './compact';\n\nexport default (input: string): string[] =>\n  compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\n","import { FieldValues } from '../types';\n\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport stringToPath from './stringToPath';\n\nexport default function set(\n  object: FieldValues,\n  path: string,\n  value?: unknown,\n) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue =\n        isObject(objValue) || Array.isArray(objValue)\n          ? objValue\n          : !isNaN(+tempPath[index + 1])\n          ? []\n          : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n}\n","import * as React from 'react';\n\nimport getControllerValue from './logic/getControllerValue';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport get from './utils/get';\nimport { EVENTS } from './constants';\nimport {\n  Field,\n  FieldPath,\n  FieldValues,\n  InternalFieldName,\n  UseControllerProps,\n  UseControllerReturn,\n} from './types';\nimport { useFormContext } from './useFormContext';\nimport { useFormState } from './useFormState';\nimport { set } from './utils';\n\nexport function useController<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(\n  props: UseControllerProps<TFieldValues, TName>,\n): UseControllerReturn<TFieldValues, TName> {\n  const methods = useFormContext<TFieldValues>();\n  const { name, control = methods.control, shouldUnregister } = props;\n  const [value, setInputStateValue] = React.useState(\n    get(\n      control._formValues,\n      name,\n      get(control._defaultValues, name, props.defaultValue),\n    ),\n  );\n  set(control._formValues, name, value);\n  const formState = useFormState({\n    control: control || methods.control,\n    name,\n  });\n\n  const registerProps = control.register(name, {\n    ...props.rules,\n    value,\n  });\n\n  const updateMounted = React.useCallback(\n    (name: InternalFieldName, value: boolean) => {\n      const field: Field = get(control._fields, name);\n\n      if (field) {\n        field._f.mount = value;\n      }\n    },\n    [control],\n  );\n\n  React.useEffect(() => {\n    const controllerSubscription = control._subjects.control.subscribe({\n      next: (data) =>\n        (!data.name || name === data.name) &&\n        setInputStateValue(get(data.values, name)),\n    });\n    updateMounted(name, true);\n\n    return () => {\n      controllerSubscription.unsubscribe();\n      const _shouldUnregisterField =\n        control._shouldUnregister || shouldUnregister;\n\n      if (\n        isNameInFieldArray(control._names.array, name)\n          ? _shouldUnregisterField && !control._isInAction\n          : _shouldUnregisterField\n      ) {\n        control.unregister(name);\n      } else {\n        updateMounted(name, false);\n      }\n    };\n  }, [name, control, shouldUnregister, updateMounted]);\n\n  return {\n    field: {\n      onChange: (event: any) => {\n        const value = getControllerValue(event);\n        setInputStateValue(value);\n\n        registerProps.onChange({\n          target: {\n            value,\n            name: name as InternalFieldName,\n          },\n          type: EVENTS.CHANGE,\n        });\n      },\n      onBlur: () => {\n        registerProps.onBlur({\n          target: {\n            name: name as InternalFieldName,\n          },\n          type: EVENTS.BLUR,\n        });\n      },\n      name,\n      value,\n      ref: (elm) => {\n        const field = get(control._fields, name);\n\n        if (elm && field && elm.focus) {\n          field._f.ref = {\n            focus: () => elm.focus(),\n            setCustomValidity: (message: string) =>\n              elm.setCustomValidity(message),\n            reportValidity: () => elm.reportValidity(),\n          };\n        }\n      },\n    },\n    formState,\n    fieldState: {\n      invalid: !!get(formState.errors, name),\n      isDirty: !!get(formState.dirtyFields, name),\n      isTouched: !!get(formState.touchedFields, name),\n      error: get(formState.errors, name),\n    },\n  };\n}\n","import * as React from 'react';\n\nimport getProxyFormState from './logic/getProxyFormState';\nimport shouldRenderFormState from './logic/shouldRenderFormState';\nimport convertToArrayPayload from './utils/convertToArrayPayload';\nimport {\n  FieldValues,\n  FormState,\n  InternalFieldName,\n  UseFormStateProps,\n  UseFormStateReturn,\n} from './types';\nimport { useFormContext } from './useFormContext';\n\nfunction useFormState<TFieldValues extends FieldValues = FieldValues>(\n  props?: UseFormStateProps<TFieldValues>,\n): UseFormStateReturn<TFieldValues> {\n  const methods = useFormContext();\n  const { control = methods.control, disabled, name } = props || {};\n  const nameRef = React.useRef<InternalFieldName>(name as InternalFieldName);\n  const [formState, updateFormState] = React.useState(control._formState);\n  const _localProxyFormState = React.useRef({\n    isDirty: false,\n    dirtyFields: false,\n    touchedFields: false,\n    isValidating: false,\n    isValid: false,\n    errors: false,\n  });\n  nameRef.current = name as InternalFieldName;\n\n  React.useEffect(() => {\n    const formStateSubscription = control._subjects.state.subscribe({\n      next: (formState) =>\n        (!nameRef.current ||\n          !formState.name ||\n          convertToArrayPayload(nameRef.current).includes(formState.name)) &&\n        shouldRenderFormState(formState, _localProxyFormState.current) &&\n        updateFormState({\n          ...control._formState,\n          ...formState,\n        }),\n    });\n\n    disabled && formStateSubscription.unsubscribe();\n\n    return () => formStateSubscription.unsubscribe();\n  }, [disabled, control]);\n\n  return getProxyFormState(\n    formState as FormState<TFieldValues>,\n    control._proxyFormState,\n    _localProxyFormState.current,\n    false,\n  );\n}\n\nexport { useFormState };\n","import isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isObject from '../utils/isObject';\n\ntype Event = { target: any };\n\nexport default (event: unknown) =>\n  isObject(event) && (event as Event).target\n    ? isCheckBoxInput((event as Event).target)\n      ? (event as Event).target.checked\n      : (event as Event).target.value\n    : event;\n","import { ControllerProps, FieldPath, FieldValues } from './types';\nimport { useController } from './useController';\n\nconst Controller = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(\n  props: ControllerProps<TFieldValues, TName>,\n) => props.render(useController<TFieldValues, TName>(props));\n\nexport { Controller };\n","import {\n  InternalFieldErrors,\n  InternalFieldName,\n  ValidateResult,\n} from '../types';\n\nexport default (\n  name: InternalFieldName,\n  validateAllFieldCriteria: boolean,\n  errors: InternalFieldErrors,\n  type: string,\n  message: ValidateResult,\n) =>\n  validateAllFieldCriteria\n    ? {\n        ...errors[name],\n        types: {\n          ...(errors[name] && errors[name]!.types ? errors[name]!.types : {}),\n          [type]: message || true,\n        },\n      }\n    : {};\n","import { FieldRefs, InternalFieldName } from '../types';\nimport { get } from '../utils';\nimport isObject from '../utils/isObject';\nimport isUndefined from '../utils/isUndefined';\nimport omit from '../utils/omit';\n\nconst focusFieldBy = (\n  fields: FieldRefs,\n  callback: (name: string) => boolean,\n  fieldsNames?: Set<InternalFieldName> | InternalFieldName[],\n) => {\n  for (const key of fieldsNames || Object.keys(fields)) {\n    const field = get(fields, key);\n\n    if (field) {\n      const _f = field._f;\n      const current = omit(field, '_f');\n\n      if (_f && callback(_f.name)) {\n        if (_f.ref.focus && isUndefined(_f.ref.focus())) {\n          break;\n        } else if (_f.refs) {\n          _f.refs[0].focus();\n          break;\n        }\n      } else if (isObject(current)) {\n        focusFieldBy(current, callback);\n      }\n    }\n  }\n};\n\nexport default focusFieldBy;\n","import isObject from './isObject';\n\nexport default function cloneObject<T extends unknown>(data: T): T {\n  let copy: any;\n  const isArray = Array.isArray(data);\n\n  if (data instanceof Date) {\n    copy = new Date(data.getTime());\n  } else if (isArray || isObject(data)) {\n    copy = isArray ? [] : {};\n    for (const key in data) {\n      copy[key] = cloneObject(data[key]);\n    }\n  } else {\n    return data;\n  }\n\n  return copy;\n}\n","import { Primitive } from '../types';\n\nimport isNullOrUndefined from './isNullOrUndefined';\nimport { isObjectType } from './isObject';\n\nexport default (value: unknown): value is Primitive =>\n  isNullOrUndefined(value) || !isObjectType(value);\n","import isObject from '../utils/isObject';\n\nimport isDateObject from './isDateObject';\nimport isPrimitive from './isPrimitive';\n\nexport default function deepEqual(object1: any, object2: any) {\n  if (\n    isPrimitive(object1) ||\n    isPrimitive(object2) ||\n    isDateObject(object1) ||\n    isDateObject(object2)\n  ) {\n    return object1 === object2;\n  }\n\n  const keys1 = Object.keys(object1);\n  const keys2 = Object.keys(object2);\n\n  if (keys1.length !== keys2.length) {\n    return false;\n  }\n\n  for (const key of keys1) {\n    const val1 = object1[key];\n\n    if (!keys2.includes(key)) {\n      return false;\n    }\n\n    if (key !== 'ref') {\n      const val2 = object2[key];\n\n      if (\n        (isObject(val1) || Array.isArray(val1)) &&\n        (isObject(val2) || Array.isArray(val2))\n          ? !deepEqual(val1, val2)\n          : val1 !== val2\n      ) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n","import { VALIDATION_MODE } from '../constants';\nimport { Mode } from '../types';\n\nexport default (\n  mode?: Mode,\n): {\n  isOnSubmit: boolean;\n  isOnBlur: boolean;\n  isOnChange: boolean;\n  isOnAll: boolean;\n  isOnTouch: boolean;\n} => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n","export default (value: unknown): value is boolean => typeof value === 'boolean';\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'file';\n","export default (value: unknown): value is Function =>\n  typeof value === 'function';\n","export default (value: any): value is HTMLElement =>\n  value instanceof HTMLElement;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `select-multiple`;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'radio';\n","import { FieldElement } from '../types';\n\nimport isCheckBoxInput from './isCheckBoxInput';\nimport isRadioInput from './isRadioInput';\n\nexport default (ref: FieldElement): ref is HTMLInputElement =>\n  isRadioInput(ref) || isCheckBoxInput(ref);\n","export default (value: unknown): value is string => typeof value === 'string';\n","export default typeof window !== 'undefined' &&\n  typeof window.HTMLElement !== 'undefined' &&\n  typeof document !== 'undefined';\n","import { Ref } from '../types';\n\nimport isHTMLElement from './isHTMLElement';\n\nexport default (ref: Ref) => !isHTMLElement(ref) || !document.contains(ref);\n","import { FieldArrayWithId } from '../types';\n\nimport omit from './omit';\n\nexport default <T extends Partial<FieldArrayWithId>[]>(\n  fields: T,\n  keyName: string,\n) => fields.map((field = {}) => omit(field, keyName));\n","export type Observer<T> = {\n  next: (value: T) => void;\n};\n\ntype TearDown = () => void;\n\nexport type SubjectType<T> = {\n  next: (value: T) => void;\n  subscribe: (value: Observer<T>) => {\n    unsubscribe: TearDown;\n  };\n};\n\nexport class Subscription {\n  private tearDowns: TearDown[] = [];\n\n  add(tearDown: TearDown) {\n    this.tearDowns.push(tearDown);\n  }\n\n  unsubscribe() {\n    for (const teardown of this.tearDowns) {\n      teardown();\n    }\n    this.tearDowns = [];\n  }\n}\n\nclass Subscriber<T> implements Observer<T> {\n  closed = false;\n\n  constructor(private observer: Observer<T>, subscription: Subscription) {\n    subscription.add(() => (this.closed = true));\n  }\n\n  next(value: T) {\n    if (!this.closed) {\n      this.observer.next(value);\n    }\n  }\n}\n\nexport default class Subject<T> {\n  observers: Observer<T>[];\n\n  constructor() {\n    this.observers = [];\n  }\n\n  next(value: T) {\n    for (const observer of this.observers) {\n      observer.next(value);\n    }\n  }\n\n  subscribe(observer: Observer<T>) {\n    const subscription = new Subscription();\n    const subscriber = new Subscriber(observer, subscription);\n    this.observers.push(subscriber);\n\n    return subscription;\n  }\n\n  unsubscribe() {\n    this.observers = [];\n  }\n}\n","import isBoolean from './isBoolean';\nimport isEmptyObject from './isEmptyObject';\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\nimport stringToPath from './stringToPath';\n\nfunction baseGet(object: any, updatePath: (string | number)[]) {\n  const length = updatePath.slice(0, -1).length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nexport default function unset(object: any, path: string) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject =\n    updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef;\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (\n        currentPathsLength === index &&\n        ((isObject(objectRef) && isEmptyObject(objectRef)) ||\n          (Array.isArray(objectRef) &&\n            !objectRef.filter(\n              (data) =>\n                (isObject(data) && !isEmptyObject(data)) || isBoolean(data),\n            ).length))\n      ) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return object;\n}\n","import isUndefined from '../utils/isUndefined';\n\ntype CheckboxFieldResult = {\n  isValid: boolean;\n  value: string | string[] | boolean | undefined;\n};\n\nconst defaultResult: CheckboxFieldResult = {\n  value: false,\n  isValid: false,\n};\n\nconst validResult = { value: true, isValid: true };\n\nexport default (options?: HTMLInputElement[]): CheckboxFieldResult => {\n  if (Array.isArray(options)) {\n    if (options.length > 1) {\n      const values = options\n        .filter((option) => option && option.checked && !option.disabled)\n        .map((option) => option.value);\n      return { value: values, isValid: !!values.length };\n    }\n\n    return options[0].checked && !options[0].disabled\n      ? // @ts-expect-error expected to work in the browser\n        options[0].attributes && !isUndefined(options[0].attributes.value)\n        ? isUndefined(options[0].value) || options[0].value === ''\n          ? validResult\n          : { value: options[0].value, isValid: true }\n        : validResult\n      : defaultResult;\n  }\n\n  return defaultResult;\n};\n","import { Field } from '../types';\nimport isUndefined from '../utils/isUndefined';\n\nexport default (\n  value: any,\n  { valueAsNumber, valueAsDate, setValueAs }: Field['_f'],\n) =>\n  isUndefined(value)\n    ? value\n    : valueAsNumber\n    ? value === ''\n      ? NaN\n      : +value\n    : valueAsDate\n    ? new Date(value)\n    : setValueAs\n    ? setValueAs(value)\n    : value;\n","type RadioFieldResult = {\n  isValid: boolean;\n  value: number | string | null;\n};\n\nconst defaultReturn: RadioFieldResult = {\n  isValid: false,\n  value: null,\n};\n\nexport default (options?: HTMLInputElement[]): RadioFieldResult =>\n  Array.isArray(options)\n    ? options.reduce(\n        (previous, option): RadioFieldResult =>\n          option && option.checked && !option.disabled\n            ? {\n                isValid: true,\n                value: option.value,\n              }\n            : previous,\n        defaultReturn,\n      )\n    : defaultReturn;\n","import { Field } from '../types';\nimport isCheckBox from '../utils/isCheckBoxInput';\nimport isFileInput from '../utils/isFileInput';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport isRadioInput from '../utils/isRadioInput';\nimport isUndefined from '../utils/isUndefined';\n\nimport getCheckboxValue from './getCheckboxValue';\nimport getFieldValueAs from './getFieldValueAs';\nimport getMultipleSelectValue from './getMultipleSelectValue';\nimport getRadioValue from './getRadioValue';\n\nexport default function getFieldValue(_f: Field['_f']) {\n  const ref = _f.ref;\n\n  if (_f.refs ? _f.refs.every((ref) => ref.disabled) : ref.disabled) {\n    return;\n  }\n\n  if (isFileInput(ref)) {\n    return ref.files;\n  }\n\n  if (isRadioInput(ref)) {\n    return getRadioValue(_f.refs).value;\n  }\n\n  if (isMultipleSelect(ref)) {\n    return getMultipleSelectValue(ref.options);\n  }\n\n  if (isCheckBox(ref)) {\n    return getCheckboxValue(_f.refs).value;\n  }\n\n  return getFieldValueAs(isUndefined(ref.value) ? _f.ref.value : ref.value, _f);\n}\n","export default (\n  options: HTMLOptionElement[] | HTMLOptionsCollection,\n): string[] =>\n  [...options]\n    .filter(({ selected }): boolean => selected)\n    .map(({ value }): string => value);\n","import {\n  CriteriaMode,\n  Field,\n  FieldName,\n  FieldRefs,\n  InternalFieldName,\n} from '../types';\nimport { get } from '../utils';\nimport set from '../utils/set';\n\nexport default <TFieldValues>(\n  fieldsNames: Set<InternalFieldName> | InternalFieldName[],\n  _fieldss: FieldRefs,\n  criteriaMode?: CriteriaMode,\n  shouldUseNativeValidation?: boolean | undefined,\n) => {\n  const fields: Record<InternalFieldName, Field['_f']> = {};\n\n  for (const name of fieldsNames) {\n    const field = get(_fieldss, name) as Field;\n\n    field && set(fields, name, field._f);\n  }\n\n  return {\n    criteriaMode,\n    names: [...fieldsNames] as FieldName<TFieldValues>[],\n    fields,\n    shouldUseNativeValidation,\n  };\n};\n","import { Field } from '../types';\n\nexport default (options: Field['_f']) =>\n  options.mount &&\n  (options.required ||\n    options.min ||\n    options.max ||\n    options.maxLength ||\n    options.minLength ||\n    options.pattern ||\n    options.validate);\n","import isObject from './isObject';\nimport isPrimitive from './isPrimitive';\n\nexport function deepMerge<\n  T extends Record<keyof T, any>,\n  U extends Record<keyof U, any>,\n>(target: T, source: U): T & U {\n  if (isPrimitive(target) || isPrimitive(source)) {\n    return source;\n  }\n\n  for (const key in source) {\n    const targetValue = target[key];\n    const sourceValue = source[key];\n\n    try {\n      target[key] =\n        (isObject(targetValue) && isObject(sourceValue)) ||\n        (Array.isArray(targetValue) && Array.isArray(sourceValue))\n          ? deepMerge(targetValue, sourceValue)\n          : sourceValue;\n    } catch {}\n  }\n\n  return target;\n}\n","import { get } from '../utils';\nimport deepEqual from '../utils/deepEqual';\nimport { deepMerge } from '../utils/deepMerge';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport set from '../utils/set';\n\nfunction setDirtyFields<\n  T extends Record<string, unknown>[],\n  U extends Record<string, unknown>[],\n  K extends Record<string, boolean | []>,\n>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n  parentNode?: K,\n  parentName?: keyof K,\n) {\n  let index = -1;\n\n  while (++index < values.length) {\n    for (const key in values[index]) {\n      if (Array.isArray(values[index][key])) {\n        !dirtyFields[index] && (dirtyFields[index] = {});\n        dirtyFields[index][key] = [];\n        setDirtyFields(\n          values[index][key] as T,\n          get(defaultValues[index] || {}, key, []),\n          dirtyFields[index][key] as [],\n          dirtyFields[index],\n          key,\n        );\n      } else {\n        !isNullOrUndefined(defaultValues) &&\n        deepEqual(get(defaultValues[index] || {}, key), values[index][key])\n          ? set(dirtyFields[index] || {}, key)\n          : (dirtyFields[index] = {\n              ...dirtyFields[index],\n              [key]: true,\n            });\n      }\n    }\n\n    parentNode &&\n      !dirtyFields.length &&\n      delete parentNode[parentName as keyof K];\n  }\n\n  return dirtyFields;\n}\n\nexport default <T extends U, U extends Record<string, unknown>[]>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n) =>\n  deepMerge(\n    setDirtyFields(values, defaultValues, dirtyFields.slice(0, values.length)),\n    setDirtyFields(defaultValues, values, dirtyFields.slice(0, values.length)),\n  );\n","export default (\n  isBlurEvent: boolean,\n  isTouched: boolean,\n  isSubmitted: boolean,\n  reValidateMode: {\n    isOnBlur: boolean;\n    isOnChange: boolean;\n  },\n  mode: Partial<{\n    isOnSubmit: boolean;\n    isOnBlur: boolean;\n    isOnChange: boolean;\n    isOnTouch: boolean;\n    isOnAll: boolean;\n  }>,\n) => {\n  if (mode.isOnAll) {\n    return false;\n  } else if (!isSubmitted && mode.isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? reValidateMode.isOnBlur : mode.isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? reValidateMode.isOnChange : mode.isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\n","import compact from '../utils/compact';\nimport get from '../utils/get';\nimport unset from '../utils/unset';\n\nexport default <T>(ref: T, name: string) =>\n  !compact(get(ref, name, [])).length && unset(ref, name);\n","import * as React from 'react';\n\nimport { Message } from '../types';\nimport isString from '../utils/isString';\n\nexport default (value: unknown): value is Message =>\n  isString(value) || React.isValidElement(value as JSX.Element);\n","export default (value: unknown): value is RegExp => value instanceof RegExp;\n","import { FieldError, Ref, ValidateResult } from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\n\nexport default function getValidateError(\n  result: ValidateResult,\n  ref: Ref,\n  type = 'validate',\n): FieldError | void {\n  if (\n    isMessage(result) ||\n    (Array.isArray(result) && result.every(isMessage)) ||\n    (isBoolean(result) && !result)\n  ) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref,\n    };\n  }\n}\n","import { ValidationRule } from '../types';\nimport isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\n\nexport default (validationData?: ValidationRule) =>\n  isObject(validationData) && !isRegex(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n      };\n","import { INPUT_VALIDATION_RULES } from '../constants';\nimport { Field, FieldError, InternalFieldErrors, Message } from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isFileInput from '../utils/isFileInput';\nimport isFunction from '../utils/isFunction';\nimport isMessage from '../utils/isMessage';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isObject from '../utils/isObject';\nimport isRadioInput from '../utils/isRadioInput';\nimport isRegex from '../utils/isRegex';\nimport isString from '../utils/isString';\n\nimport appendErrors from './appendErrors';\nimport getCheckboxValue from './getCheckboxValue';\nimport getRadioValue from './getRadioValue';\nimport getValidateError from './getValidateError';\nimport getValueAndMessage from './getValueAndMessage';\n\nexport default async (\n  field: Field,\n  inputValue: any,\n  validateAllFieldCriteria: boolean,\n  shouldUseNativeValidation?: boolean,\n): Promise<InternalFieldErrors> => {\n  const {\n    ref,\n    refs,\n    required,\n    maxLength,\n    minLength,\n    min,\n    max,\n    pattern,\n    validate,\n    name,\n    valueAsNumber,\n    mount,\n    disabled,\n  } = field._f;\n  if (!mount || disabled) {\n    return {};\n  }\n  const inputRef: HTMLInputElement = refs ? refs[0] : (ref as HTMLInputElement);\n  const setCustomValidty = (message?: string | boolean) => {\n    if (shouldUseNativeValidation && inputRef.reportValidity) {\n      inputRef.setCustomValidity(isBoolean(message) ? '' : message || ' ');\n      inputRef.reportValidity();\n    }\n  };\n  const error: InternalFieldErrors = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty =\n    ((valueAsNumber || isFileInput(ref)) && !ref.value) ||\n    inputValue === '' ||\n    (Array.isArray(inputValue) && !inputValue.length);\n  const appendErrorsCurry = appendErrors.bind(\n    null,\n    name,\n    validateAllFieldCriteria,\n    error,\n  );\n  const getMinMaxMessage = (\n    exceedMax: boolean,\n    maxLengthMessage: Message,\n    minLengthMessage: Message,\n    maxType = INPUT_VALIDATION_RULES.maxLength,\n    minType = INPUT_VALIDATION_RULES.minLength,\n  ) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = {\n      type: exceedMax ? maxType : minType,\n      message,\n      ref,\n      ...appendErrorsCurry(exceedMax ? maxType : minType, message),\n    };\n  };\n\n  if (\n    required &&\n    ((!isRadioOrCheckbox && (isEmpty || isNullOrUndefined(inputValue))) ||\n      (isBoolean(inputValue) && !inputValue) ||\n      (isCheckBox && !getCheckboxValue(refs).isValid) ||\n      (isRadio && !getRadioValue(refs).isValid))\n  ) {\n    const { value, message } = isMessage(required)\n      ? { value: !!required, message: required }\n      : getValueAndMessage(required);\n\n    if (value) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.required,\n        message,\n        ref: inputRef,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\n      };\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(message);\n        return error;\n      }\n    }\n  }\n\n  if (!isEmpty && (!isNullOrUndefined(min) || !isNullOrUndefined(max))) {\n    let exceedMax;\n    let exceedMin;\n    const maxOutput = getValueAndMessage(max);\n    const minOutput = getValueAndMessage(min);\n\n    if (!isNaN(inputValue)) {\n      const valueNumber =\n        (ref as HTMLInputElement).valueAsNumber || parseFloat(inputValue);\n      if (!isNullOrUndefined(maxOutput.value)) {\n        exceedMax = valueNumber > maxOutput.value;\n      }\n      if (!isNullOrUndefined(minOutput.value)) {\n        exceedMin = valueNumber < minOutput.value;\n      }\n    } else {\n      const valueDate =\n        (ref as HTMLInputElement).valueAsDate || new Date(inputValue);\n      if (isString(maxOutput.value)) {\n        exceedMax = valueDate > new Date(maxOutput.value);\n      }\n      if (isString(minOutput.value)) {\n        exceedMin = valueDate < new Date(minOutput.value);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        !!exceedMax,\n        maxOutput.message,\n        minOutput.message,\n        INPUT_VALIDATION_RULES.max,\n        INPUT_VALIDATION_RULES.min,\n      );\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(error[name]!.message);\n        return error;\n      }\n    }\n  }\n\n  if ((maxLength || minLength) && !isEmpty && isString(inputValue)) {\n    const maxLengthOutput = getValueAndMessage(maxLength);\n    const minLengthOutput = getValueAndMessage(minLength);\n    const exceedMax =\n      !isNullOrUndefined(maxLengthOutput.value) &&\n      inputValue.length > maxLengthOutput.value;\n    const exceedMin =\n      !isNullOrUndefined(minLengthOutput.value) &&\n      inputValue.length < minLengthOutput.value;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        exceedMax,\n        maxLengthOutput.message,\n        minLengthOutput.message,\n      );\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(error[name]!.message);\n        return error;\n      }\n    }\n  }\n\n  if (pattern && !isEmpty && isString(inputValue)) {\n    const { value: patternValue, message } = getValueAndMessage(pattern);\n\n    if (isRegex(patternValue) && !inputValue.match(patternValue)) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.pattern,\n        message,\n        ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\n      };\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(message);\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    if (isFunction(validate)) {\n      const result = await validate(inputValue);\n      const validateError = getValidateError(result, inputRef);\n\n      if (validateError) {\n        error[name] = {\n          ...validateError,\n          ...appendErrorsCurry(\n            INPUT_VALIDATION_RULES.validate,\n            validateError.message,\n          ),\n        };\n        if (!validateAllFieldCriteria) {\n          setCustomValidty(validateError.message);\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {} as FieldError;\n\n      for (const key in validate) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateError = getValidateError(\n          await validate[key](inputValue),\n          inputRef,\n          key,\n        );\n\n        if (validateError) {\n          validationResult = {\n            ...validateError,\n            ...appendErrorsCurry(key, validateError.message),\n          };\n\n          setCustomValidty(validateError.message);\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = {\n          ref: inputRef,\n          ...validationResult,\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  setCustomValidty(true);\n  return error;\n};\n","import { EVENTS, VALIDATION_MODE } from '../constants';\nimport {\n  BatchFieldArrayUpdate,\n  ChangeHandler,\n  DeepPartial,\n  DelayCallback,\n  Field,\n  FieldError,\n  FieldNamesMarkedBoolean,\n  FieldPath,\n  FieldRefs,\n  FieldValues,\n  FormState,\n  GetIsDirty,\n  InternalFieldName,\n  Names,\n  Path,\n  PathValue,\n  Ref,\n  RegisterOptions,\n  ResolverResult,\n  SetFieldValue,\n  SetValueConfig,\n  Subjects,\n  UnpackNestedValue,\n  UpdateValues,\n  UseFormClearErrors,\n  UseFormGetValues,\n  UseFormHandleSubmit,\n  UseFormProps,\n  UseFormRegister,\n  UseFormRegisterReturn,\n  UseFormReset,\n  UseFormReturn,\n  UseFormSetError,\n  UseFormSetFocus,\n  UseFormSetValue,\n  UseFormTrigger,\n  UseFormUnregister,\n  UseFormWatch,\n  WatchInternal,\n  WatchObserver,\n} from '../types';\nimport { set } from '../utils';\nimport cloneObject from '../utils/cloneObject';\nimport compact from '../utils/compact';\nimport convertToArrayPayload from '../utils/convertToArrayPayload';\nimport deepEqual from '../utils/deepEqual';\nimport get from '../utils/get';\nimport getValidationModes from '../utils/getValidationModes';\nimport isBoolean from '../utils/isBoolean';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isDateObject from '../utils/isDateObject';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isFileInput from '../utils/isFileInput';\nimport isFunction from '../utils/isFunction';\nimport isHTMLElement from '../utils/isHTMLElement';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isObject from '../utils/isObject';\nimport isPrimitive from '../utils/isPrimitive';\nimport isRadioOrCheckboxFunction from '../utils/isRadioOrCheckbox';\nimport isString from '../utils/isString';\nimport isUndefined from '../utils/isUndefined';\nimport isWeb from '../utils/isWeb';\nimport live from '../utils/live';\nimport omit from '../utils/omit';\nimport omitKey from '../utils/omitKeys';\nimport omitKeys from '../utils/omitKeys';\nimport Subject from '../utils/Subject';\nimport unset from '../utils/unset';\n\nimport focusFieldBy from './focusFieldBy';\nimport getFieldValue from './getFieldValue';\nimport getFieldValueAs from './getFieldValueAs';\nimport getNodeParentName from './getNodeParentName';\nimport getResolverOptions from './getResolverOptions';\nimport hasValidation from './hasValidation';\nimport isNameInFieldArray from './isNameInFieldArray';\nimport setFieldArrayDirtyFields from './setFieldArrayDirtyFields';\nimport skipValidation from './skipValidation';\nimport unsetEmptyArray from './unsetEmptyArray';\nimport validateField from './validateField';\n\nconst defaultOptions = {\n  mode: VALIDATION_MODE.onSubmit,\n  reValidateMode: VALIDATION_MODE.onChange,\n  shouldFocusError: true,\n} as const;\n\nconst isWindowUndefined = typeof window === 'undefined';\n\nexport function createFormControl<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object,\n>(\n  props: UseFormProps<TFieldValues, TContext> = {},\n): Omit<UseFormReturn<TFieldValues, TContext>, 'formState'> {\n  let formOptions = {\n    ...defaultOptions,\n    ...props,\n  };\n  let _delayCallback: DelayCallback;\n  let _formState = {\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {},\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {},\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    errors: {},\n  };\n  let _fields = {};\n  let _formValues = {};\n  let _defaultValues = formOptions.defaultValues || {};\n  let _isInAction = false;\n  let _isMounted = false;\n  let _timer = 0;\n  let _names: Names = {\n    mount: new Set(),\n    unMount: new Set(),\n    array: new Set(),\n    watch: new Set(),\n  } as Names;\n  let _validateCount: Record<InternalFieldName, number> = {};\n  const _proxyFormState = {\n    isDirty: false,\n    dirtyFields: false,\n    touchedFields: false,\n    isValidating: false,\n    isValid: false,\n    errors: false,\n  };\n  const _subjects: Subjects<TFieldValues> = {\n    watch: new Subject(),\n    control: new Subject(),\n    array: new Subject(),\n    state: new Subject(),\n  };\n\n  const validationMode = getValidationModes(formOptions.mode);\n  const reValidateMode = getValidationModes(formOptions.reValidateMode);\n  const isValidateAllFieldCriteria =\n    formOptions.criteriaMode === VALIDATION_MODE.all;\n\n  const debounce =\n    <T extends Function>(callback: T, wait: number) =>\n    (...args: any) => {\n      clearTimeout(_timer);\n      _timer = window.setTimeout(() => callback(...args), wait);\n    };\n\n  const isFieldWatched = (name: FieldPath<TFieldValues>) =>\n    _names.watchAll ||\n    _names.watch.has(name) ||\n    _names.watch.has((name.match(/\\w+/) || [])[0]);\n\n  const updateErrorState = (name: InternalFieldName, error: FieldError) => {\n    set(_formState.errors, name, error);\n\n    _subjects.state.next({\n      errors: _formState.errors,\n    });\n  };\n\n  const shouldRenderBaseOnError = async (\n    shouldSkipRender: boolean,\n    name: InternalFieldName,\n    isValid: boolean,\n    error?: FieldError,\n    fieldState?: {\n      dirty?: FieldNamesMarkedBoolean<TFieldValues>;\n      isDirty?: boolean;\n      touched?: FieldNamesMarkedBoolean<TFieldValues>;\n    },\n  ): Promise<void> => {\n    const previousError = get(_formState.errors, name);\n    const shouldUpdateValid =\n      _proxyFormState.isValid && _formState.isValid !== isValid;\n\n    if (props.delayError && error) {\n      _delayCallback =\n        _delayCallback || debounce(updateErrorState, props.delayError);\n\n      _delayCallback(name, error);\n    } else {\n      clearTimeout(_timer);\n      error\n        ? set(_formState.errors, name, error)\n        : unset(_formState.errors, name);\n    }\n\n    if (\n      ((error ? !deepEqual(previousError, error) : previousError) ||\n        !isEmptyObject(fieldState) ||\n        shouldUpdateValid) &&\n      !shouldSkipRender\n    ) {\n      const updatedFormState = {\n        ...fieldState,\n        ...(shouldUpdateValid ? { isValid } : {}),\n        errors: _formState.errors,\n        name,\n      };\n\n      _formState = {\n        ..._formState,\n        ...updatedFormState,\n      };\n\n      _subjects.state.next(updatedFormState);\n    }\n\n    _validateCount[name]--;\n\n    if (_proxyFormState.isValidating && !_validateCount[name]) {\n      _subjects.state.next({\n        isValidating: false,\n      });\n      _validateCount = {};\n    }\n  };\n\n  const setFieldValue = (\n    name: InternalFieldName,\n    value: SetFieldValue<TFieldValues>,\n    options: SetValueConfig = {},\n    shouldRender?: boolean,\n  ) => {\n    const field: Field = get(_fields, name);\n\n    if (field) {\n      const _f = field._f;\n\n      if (_f) {\n        set(_formValues, name, getFieldValueAs(value, _f));\n\n        const fieldValue =\n          isWeb && isHTMLElement(_f.ref) && isNullOrUndefined(value)\n            ? ''\n            : value;\n\n        if (isFileInput(_f.ref) && !isString(fieldValue)) {\n          _f.ref.files = fieldValue as FileList;\n        } else if (isMultipleSelect(_f.ref)) {\n          [..._f.ref.options].forEach(\n            (selectRef) =>\n              (selectRef.selected = (\n                fieldValue as InternalFieldName[]\n              ).includes(selectRef.value)),\n          );\n        } else if (_f.refs) {\n          if (isCheckBoxInput(_f.ref)) {\n            _f.refs.length > 1\n              ? _f.refs.forEach(\n                  (checkboxRef) =>\n                    (checkboxRef.checked = Array.isArray(fieldValue)\n                      ? !!(fieldValue as []).find(\n                          (data: string) => data === checkboxRef.value,\n                        )\n                      : fieldValue === checkboxRef.value),\n                )\n              : (_f.refs[0].checked = !!fieldValue);\n          } else {\n            _f.refs.forEach(\n              (radioRef: HTMLInputElement) =>\n                (radioRef.checked = radioRef.value === fieldValue),\n            );\n          }\n        } else {\n          _f.ref.value = fieldValue;\n        }\n\n        if (shouldRender) {\n          _subjects.control.next({\n            values: getValues(),\n            name,\n          });\n        }\n\n        (options.shouldDirty || options.shouldTouch) &&\n          updateTouchAndDirtyState(name, fieldValue, options.shouldTouch);\n        options.shouldValidate && trigger(name as Path<TFieldValues>);\n      }\n    }\n  };\n\n  const updateTouchAndDirtyState = (\n    name: InternalFieldName,\n    inputValue: unknown,\n    isCurrentTouched?: boolean,\n    shouldRender = true,\n  ): Partial<\n    Pick<FormState<TFieldValues>, 'dirtyFields' | 'isDirty' | 'touchedFields'>\n  > => {\n    const state: Partial<FormState<TFieldValues>> & { name: string } = {\n      name,\n    };\n    let isChanged = false;\n\n    if (_proxyFormState.isDirty) {\n      const previousIsDirty = _formState.isDirty;\n      _formState.isDirty = _getIsDirty();\n      state.isDirty = _formState.isDirty;\n      isChanged = previousIsDirty !== state.isDirty;\n    }\n\n    if (_proxyFormState.dirtyFields && !isCurrentTouched) {\n      const isPreviousFieldDirty = get(_formState.dirtyFields, name);\n      const isCurrentFieldDirty = !deepEqual(\n        get(_defaultValues, name),\n        inputValue,\n      );\n      isCurrentFieldDirty\n        ? set(_formState.dirtyFields, name, true)\n        : unset(_formState.dirtyFields, name);\n      state.dirtyFields = _formState.dirtyFields;\n      isChanged =\n        isChanged || isPreviousFieldDirty !== get(_formState.dirtyFields, name);\n    }\n\n    const isPreviousFieldTouched = get(_formState.touchedFields, name);\n\n    if (isCurrentTouched && !isPreviousFieldTouched) {\n      set(_formState.touchedFields, name, isCurrentTouched);\n      state.touchedFields = _formState.touchedFields;\n      isChanged =\n        isChanged ||\n        (_proxyFormState.touchedFields &&\n          isPreviousFieldTouched !== isCurrentTouched);\n    }\n\n    isChanged && shouldRender && _subjects.state.next(state);\n\n    return isChanged ? state : {};\n  };\n\n  const executeResolver = async (name?: InternalFieldName[]) => {\n    return formOptions.resolver\n      ? await formOptions.resolver(\n          { ..._formValues } as UnpackNestedValue<TFieldValues>,\n          formOptions.context,\n          getResolverOptions(\n            name || _names.mount,\n            _fields,\n            formOptions.criteriaMode,\n            formOptions.shouldUseNativeValidation,\n          ),\n        )\n      : ({} as ResolverResult);\n  };\n\n  const executeResolverValidation = async (names?: InternalFieldName[]) => {\n    const { errors } = await executeResolver();\n\n    if (names) {\n      for (const name of names) {\n        const error = get(errors, name);\n        error\n          ? set(_formState.errors, name, error)\n          : unset(_formState.errors, name);\n      }\n    } else {\n      _formState.errors = errors;\n    }\n\n    return errors;\n  };\n\n  const validateForm = async (\n    _fields: FieldRefs,\n    shouldCheckValid?: boolean,\n    context = {\n      valid: true,\n    },\n  ) => {\n    for (const name in _fields) {\n      const field = _fields[name];\n\n      if (field) {\n        const _f = field._f;\n        const fieldValue = omit(field, '_f');\n\n        if (_f) {\n          const fieldError = await validateField(\n            field,\n            get(_formValues, _f.name),\n            isValidateAllFieldCriteria,\n            formOptions.shouldUseNativeValidation,\n          );\n\n          if (fieldError[_f.name]) {\n            context.valid = false;\n\n            if (shouldCheckValid) {\n              break;\n            }\n          }\n\n          if (!shouldCheckValid) {\n            fieldError[_f.name]\n              ? set(_formState.errors, _f.name, fieldError[_f.name])\n              : unset(_formState.errors, _f.name);\n          }\n        }\n\n        fieldValue &&\n          (await validateForm(fieldValue, shouldCheckValid, context));\n      }\n    }\n\n    return context.valid;\n  };\n\n  const handleChange: ChangeHandler = async ({\n    type,\n    target,\n    target: { value, name, type: inputType },\n  }) => {\n    const field = get(_fields, name) as Field;\n\n    if (field) {\n      let error;\n      let isValid;\n      const inputValue = inputType ? getFieldValue(field._f) : value;\n      const isBlurEvent = type === EVENTS.BLUR;\n\n      const shouldSkipValidation =\n        (!hasValidation(field._f) &&\n          !formOptions.resolver &&\n          !get(_formState.errors, name) &&\n          !field._f.deps) ||\n        skipValidation(\n          isBlurEvent,\n          get(_formState.touchedFields, name),\n          _formState.isSubmitted,\n          reValidateMode,\n          validationMode,\n        );\n      const isWatched = !isBlurEvent && isFieldWatched(name);\n\n      if (!isUndefined(inputValue)) {\n        set(_formValues, name, inputValue);\n      }\n\n      const fieldState = updateTouchAndDirtyState(\n        name,\n        inputValue,\n        isBlurEvent,\n        false,\n      );\n\n      const shouldRender = !isEmptyObject(fieldState) || isWatched;\n\n      !isBlurEvent &&\n        _subjects.watch.next({\n          name,\n          type,\n        });\n\n      if (shouldSkipValidation) {\n        return (\n          shouldRender &&\n          _subjects.state.next({ name, ...(isWatched ? {} : fieldState) })\n        );\n      }\n\n      !isBlurEvent && isWatched && _subjects.state.next({});\n\n      _validateCount[name] = _validateCount[name] ? +1 : 1;\n\n      _proxyFormState.isValidating &&\n        _subjects.state.next({\n          isValidating: true,\n        });\n\n      if (formOptions.resolver) {\n        const { errors } = await executeResolver([name]);\n        error = get(errors, name);\n\n        if (isCheckBoxInput(target as Ref) && !error) {\n          const parentNodeName = getNodeParentName(name);\n          const valError = get(errors, parentNodeName, {});\n          valError.type && valError.message && (error = valError);\n\n          if (valError || get(_formState.errors, parentNodeName)) {\n            name = parentNodeName;\n          }\n        }\n\n        isValid = isEmptyObject(errors);\n      } else {\n        error = (\n          await validateField(\n            field,\n            get(_formValues, name) as Field,\n            isValidateAllFieldCriteria,\n            formOptions.shouldUseNativeValidation,\n          )\n        )[name];\n\n        isValid = await _updateValid(true);\n      }\n\n      if (field._f.deps) {\n        trigger(field._f.deps as FieldPath<TFieldValues>[]);\n      }\n\n      shouldRenderBaseOnError(false, name, isValid, error, fieldState);\n    }\n  };\n\n  const _updateValidAndInputValue = (\n    name: InternalFieldName,\n    ref?: Ref,\n    shouldSkipValueAs?: boolean,\n  ) => {\n    const field = get(_fields, name) as Field;\n\n    if (field) {\n      const fieldValue = get(_formValues, name);\n      const defaultValue = isUndefined(fieldValue)\n        ? get(_defaultValues, name)\n        : fieldValue;\n\n      if (\n        isUndefined(defaultValue) ||\n        (ref && (ref as HTMLInputElement).defaultChecked) ||\n        shouldSkipValueAs\n      ) {\n        set(\n          _formValues,\n          name,\n          shouldSkipValueAs ? defaultValue : getFieldValue(field._f),\n        );\n      } else {\n        setFieldValue(name, defaultValue);\n      }\n    }\n\n    _isMounted && _updateValid();\n  };\n\n  const _getIsDirty: GetIsDirty = (name, data) => {\n    name && data && set(_formValues, name, data);\n\n    return !deepEqual({ ...getValues() }, _defaultValues);\n  };\n\n  const _updateValid = async (skipRender?: boolean) => {\n    let isValid = false;\n    if (_proxyFormState.isValid) {\n      isValid = formOptions.resolver\n        ? isEmptyObject((await executeResolver()).errors)\n        : await validateForm(_fields, true);\n\n      if (!skipRender && isValid !== _formState.isValid) {\n        _formState.isValid = isValid;\n        _subjects.state.next({\n          isValid,\n        });\n      }\n    }\n    return isValid;\n  };\n\n  const setValues = (\n    name: FieldPath<TFieldValues>,\n    value: UnpackNestedValue<PathValue<TFieldValues, FieldPath<TFieldValues>>>,\n    options: SetValueConfig,\n  ) =>\n    Object.entries(value).forEach(([fieldKey, fieldValue]) => {\n      const fieldName = `${name}.${fieldKey}` as Path<TFieldValues>;\n      const field = get(_fields, fieldName);\n\n      (_names.array.has(name) ||\n        !isPrimitive(fieldValue) ||\n        (field && !field._f)) &&\n      !isDateObject(fieldValue)\n        ? setValues(\n            fieldName,\n            fieldValue as SetFieldValue<TFieldValues>,\n            options,\n          )\n        : setFieldValue(\n            fieldName,\n            fieldValue as SetFieldValue<TFieldValues>,\n            options,\n            true,\n          );\n    });\n\n  const _getWatch: WatchInternal<TFieldValues> = (\n    fieldNames,\n    defaultValue,\n    isGlobal,\n  ) => {\n    const fieldValues = {\n      ...(_isMounted\n        ? _formValues\n        : isUndefined(defaultValue)\n        ? _defaultValues\n        : isString(fieldNames)\n        ? { [fieldNames]: defaultValue }\n        : defaultValue),\n    };\n\n    if (!fieldNames) {\n      isGlobal && (_names.watchAll = true);\n      return fieldValues;\n    }\n\n    const result = [];\n\n    for (const fieldName of convertToArrayPayload(fieldNames)) {\n      isGlobal && _names.watch.add(fieldName as InternalFieldName);\n      result.push(get(fieldValues, fieldName as InternalFieldName));\n    }\n\n    return Array.isArray(fieldNames) ? result : result[0];\n  };\n\n  const _updateValues: UpdateValues<TFieldValues> = (\n    defaultValues,\n    name = '',\n  ): void => {\n    for (const key in defaultValues) {\n      const value = defaultValues[key];\n      const fieldName = name + (name ? '.' : '') + key;\n      const field = get(_fields, fieldName);\n\n      if (!field || !field._f) {\n        if (\n          (isObject(value) && Object.keys(value).length) ||\n          (Array.isArray(value) && value.length)\n        ) {\n          _updateValues(value, fieldName);\n        } else if (!field) {\n          set(_formValues, fieldName, value);\n        }\n      }\n    }\n  };\n\n  const _updateFieldArray: BatchFieldArrayUpdate = (\n    keyName,\n    name,\n    method,\n    args,\n    updatedFieldArrayValuesWithKey = [],\n    shouldSet = true,\n    shouldSetFields = true,\n  ) => {\n    let output;\n    const updatedFieldArrayValues = omitKeys(\n      updatedFieldArrayValuesWithKey,\n      keyName,\n    );\n    _isInAction = true;\n\n    if (shouldSetFields && get(_fields, name)) {\n      output = method(get(_fields, name), args.argA, args.argB);\n      shouldSet && set(_fields, name, output);\n    }\n\n    output = method(get(_formValues, name), args.argA, args.argB);\n    shouldSet && set(_formValues, name, output);\n\n    if (Array.isArray(get(_formState.errors, name))) {\n      const output = method(get(_formState.errors, name), args.argA, args.argB);\n      shouldSet && set(_formState.errors, name, output);\n      unsetEmptyArray(_formState.errors, name);\n    }\n\n    if (_proxyFormState.touchedFields && get(_formState.touchedFields, name)) {\n      const output = method(\n        get(_formState.touchedFields, name),\n        args.argA,\n        args.argB,\n      );\n      shouldSet && set(_formState.touchedFields, name, output);\n      unsetEmptyArray(_formState.touchedFields, name);\n    }\n\n    if (_proxyFormState.dirtyFields || _proxyFormState.isDirty) {\n      set(\n        _formState.dirtyFields,\n        name,\n        setFieldArrayDirtyFields(\n          omitKey(updatedFieldArrayValues, keyName),\n          get(_defaultValues, name, []),\n          get(_formState.dirtyFields, name, []),\n        ),\n      );\n      updatedFieldArrayValues &&\n        set(\n          _formState.dirtyFields,\n          name,\n          setFieldArrayDirtyFields(\n            omitKey(updatedFieldArrayValues, keyName),\n            get(_defaultValues, name, []),\n            get(_formState.dirtyFields, name, []),\n          ),\n        );\n      unsetEmptyArray(_formState.dirtyFields, name);\n    }\n\n    _subjects.state.next({\n      isDirty: _getIsDirty(name, omitKey(updatedFieldArrayValues, keyName)),\n      dirtyFields: _formState.dirtyFields,\n      errors: _formState.errors,\n      isValid: _formState.isValid,\n    });\n  };\n\n  const _getFieldArrayValue = (name: InternalFieldName) =>\n    get(_isMounted ? _formValues : _defaultValues, name, []);\n\n  const setValue: UseFormSetValue<TFieldValues> = (\n    name,\n    value,\n    options = {},\n  ) => {\n    const field = get(_fields, name);\n    const isFieldArray = _names.array.has(name);\n\n    set(_formValues, name, value);\n\n    if (isFieldArray) {\n      _subjects.array.next({\n        name,\n        values: _formValues,\n      });\n\n      if (\n        (_proxyFormState.isDirty || _proxyFormState.dirtyFields) &&\n        options.shouldDirty\n      ) {\n        set(\n          _formState.dirtyFields,\n          name,\n          setFieldArrayDirtyFields(\n            value,\n            get(_defaultValues, name, []),\n            get(_formState.dirtyFields, name, []),\n          ),\n        );\n\n        _subjects.state.next({\n          name,\n          dirtyFields: _formState.dirtyFields,\n          isDirty: _getIsDirty(name, value),\n        });\n      }\n    } else {\n      field && !field._f && !isNullOrUndefined(value)\n        ? setValues(name, value, options)\n        : setFieldValue(name, value, options, true);\n    }\n\n    isFieldWatched(name) && _subjects.state.next({});\n    _subjects.watch.next({\n      name,\n    });\n  };\n\n  const trigger: UseFormTrigger<TFieldValues> = async (name, options = {}) => {\n    const fieldNames = convertToArrayPayload(name) as InternalFieldName[];\n    let isValid;\n\n    _subjects.state.next({\n      isValidating: true,\n    });\n\n    if (formOptions.resolver) {\n      const schemaResult = await executeResolverValidation(\n        isUndefined(name) ? name : fieldNames,\n      );\n      isValid = name\n        ? fieldNames.every((name) => !get(schemaResult, name))\n        : isEmptyObject(schemaResult);\n    } else {\n      if (name) {\n        isValid = (\n          await Promise.all(\n            fieldNames.map(async (fieldName) => {\n              const field = get(_fields, fieldName);\n              return await validateForm(\n                field._f ? { [fieldName]: field } : field,\n              );\n            }),\n          )\n        ).every(Boolean);\n\n        _updateValid();\n      } else {\n        isValid = await validateForm(_fields);\n      }\n    }\n\n    _subjects.state.next({\n      ...(isString(name) ? { name } : {}),\n      errors: _formState.errors,\n      isValid,\n      isValidating: false,\n    });\n\n    if (options.shouldFocus && !isValid) {\n      focusFieldBy(\n        _fields,\n        (key) => get(_formState.errors, key),\n        name ? fieldNames : _names.mount,\n      );\n    }\n\n    return isValid;\n  };\n\n  const getValues: UseFormGetValues<TFieldValues> = (\n    fieldNames?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>,\n  ) => {\n    const values = {\n      ..._defaultValues,\n      ..._formValues,\n    };\n\n    return isUndefined(fieldNames)\n      ? values\n      : isString(fieldNames)\n      ? get(values, fieldNames as InternalFieldName)\n      : fieldNames.map((name) => get(values, name as InternalFieldName));\n  };\n\n  const clearErrors: UseFormClearErrors<TFieldValues> = (name) => {\n    name\n      ? convertToArrayPayload(name).forEach((inputName) =>\n          unset(_formState.errors, inputName),\n        )\n      : (_formState.errors = {});\n\n    _subjects.state.next({\n      errors: _formState.errors,\n    });\n  };\n\n  const setError: UseFormSetError<TFieldValues> = (name, error, options) => {\n    const ref = ((get(_fields, name, { _f: {} }) as Field)._f || {}).ref;\n\n    set(_formState.errors, name, {\n      ...error,\n      ref,\n    });\n\n    _subjects.state.next({\n      name,\n      errors: _formState.errors,\n      isValid: false,\n    });\n\n    options && options.shouldFocus && ref && ref.focus && ref.focus();\n  };\n\n  const watch: UseFormWatch<TFieldValues> = (\n    fieldName?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>\n      | WatchObserver<TFieldValues>,\n    defaultValue?: unknown,\n  ) =>\n    isFunction(fieldName)\n      ? _subjects.watch.subscribe({\n          next: (info: any) =>\n            fieldName(\n              _getWatch(\n                undefined,\n                defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n              ),\n              info,\n            ),\n        })\n      : _getWatch(\n          fieldName as InternalFieldName | InternalFieldName[],\n          defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n          true,\n        );\n\n  const unregister: UseFormUnregister<TFieldValues> = (name, options = {}) => {\n    for (const inputName of name ? convertToArrayPayload(name) : _names.mount) {\n      _names.mount.delete(inputName);\n      _names.array.delete(inputName);\n\n      if (get(_fields, inputName)) {\n        if (!options.keepValue) {\n          unset(_fields, inputName);\n          unset(_formValues, inputName);\n        }\n\n        !options.keepError && unset(_formState.errors, inputName);\n        !options.keepDirty && unset(_formState.dirtyFields, inputName);\n        !options.keepTouched && unset(_formState.touchedFields, inputName);\n        !formOptions.shouldUnregister &&\n          !options.keepDefaultValue &&\n          unset(_defaultValues, inputName);\n      }\n    }\n\n    _subjects.watch.next({});\n\n    _subjects.state.next({\n      ..._formState,\n      ...(!options.keepDirty ? {} : { isDirty: _getIsDirty() }),\n    });\n\n    !options.keepIsValid && _updateValid();\n  };\n\n  const registerFieldRef = (\n    name: InternalFieldName,\n    fieldRef: HTMLInputElement,\n    options?: RegisterOptions,\n  ): ((name: InternalFieldName) => void) | void => {\n    register(name as FieldPath<TFieldValues>, options);\n    let field: Field = get(_fields, name);\n    const ref = isUndefined(fieldRef.value)\n      ? fieldRef.querySelectorAll\n        ? (fieldRef.querySelectorAll('input,select,textarea')[0] as Ref) ||\n          fieldRef\n        : fieldRef\n      : fieldRef;\n\n    const isRadioOrCheckbox = isRadioOrCheckboxFunction(ref);\n\n    if (\n      ref === field._f.ref ||\n      (isRadioOrCheckbox &&\n        compact(field._f.refs || []).find((option) => option === ref))\n    ) {\n      return;\n    }\n\n    field = {\n      _f: isRadioOrCheckbox\n        ? {\n            ...field._f,\n            refs: [\n              ...compact(field._f.refs || []).filter(\n                (ref) => isHTMLElement(ref) && document.contains(ref),\n              ),\n              ref,\n            ],\n            ref: { type: ref.type, name },\n          }\n        : {\n            ...field._f,\n            ref,\n          },\n    };\n\n    set(_fields, name, field);\n\n    _updateValidAndInputValue(name, ref);\n  };\n\n  const register: UseFormRegister<TFieldValues> = (name, options = {}) => {\n    const field = get(_fields, name);\n\n    set(_fields, name, {\n      _f: {\n        ...(field && field._f ? field._f : { ref: { name } }),\n        name,\n        mount: true,\n        ...options,\n      },\n    });\n\n    if (options.value) {\n      set(_formValues, name, options.value);\n    }\n\n    if (\n      isBoolean(options.disabled) &&\n      field &&\n      field._f &&\n      isBoolean(field._f.ref.disabled) &&\n      field._f.ref.disabled !== options.disabled\n    ) {\n      set(_formValues, name, options.disabled ? undefined : field._f.ref.value);\n    }\n\n    _names.mount.add(name);\n    !field && _updateValidAndInputValue(name, undefined, true);\n\n    return isWindowUndefined\n      ? ({ name: name as InternalFieldName } as UseFormRegisterReturn)\n      : {\n          name,\n          ...(isUndefined(options.disabled)\n            ? {}\n            : { disabled: options.disabled }),\n          onChange: handleChange,\n          onBlur: handleChange,\n          ref: (ref: HTMLInputElement | null): void => {\n            if (ref) {\n              registerFieldRef(name, ref, options);\n            } else {\n              const field = get(_fields, name, {}) as Field;\n              const _shouldUnregister =\n                formOptions.shouldUnregister || options.shouldUnregister;\n\n              if (field._f) {\n                field._f.mount = false;\n              }\n\n              _shouldUnregister &&\n                !(isNameInFieldArray(_names.array, name) && _isInAction) &&\n                _names.unMount.add(name);\n            }\n          },\n        };\n  };\n\n  const handleSubmit: UseFormHandleSubmit<TFieldValues> =\n    (onValid, onInvalid) => async (e) => {\n      if (e) {\n        e.preventDefault && e.preventDefault();\n        e.persist && e.persist();\n      }\n      let hasNoPromiseError = true;\n      let fieldValues: any = { ..._formValues };\n\n      _subjects.state.next({\n        isSubmitting: true,\n      });\n\n      try {\n        if (formOptions.resolver) {\n          const { errors, values } = await executeResolver();\n          _formState.errors = errors;\n          fieldValues = values;\n        } else {\n          await validateForm(_fields);\n        }\n\n        if (\n          isEmptyObject(_formState.errors) &&\n          Object.keys(_formState.errors).every((name) => get(fieldValues, name))\n        ) {\n          _subjects.state.next({\n            errors: {},\n            isSubmitting: true,\n          });\n          await onValid(fieldValues, e);\n        } else {\n          onInvalid && (await onInvalid(_formState.errors, e));\n          formOptions.shouldFocusError &&\n            focusFieldBy(\n              _fields,\n              (key) => get(_formState.errors, key),\n              _names.mount,\n            );\n        }\n      } catch (err) {\n        hasNoPromiseError = false;\n        throw err;\n      } finally {\n        _formState.isSubmitted = true;\n        _subjects.state.next({\n          isSubmitted: true,\n          isSubmitting: false,\n          isSubmitSuccessful:\n            isEmptyObject(_formState.errors) && hasNoPromiseError,\n          submitCount: _formState.submitCount + 1,\n          errors: _formState.errors,\n        });\n      }\n    };\n\n  const reset: UseFormReset<TFieldValues> = (\n    formValues,\n    keepStateOptions = {},\n  ) => {\n    const updatedValues = formValues || _defaultValues;\n    const values = cloneObject(updatedValues);\n\n    _formValues = values;\n\n    if (isWeb && !keepStateOptions.keepValues) {\n      for (const name of _names.mount) {\n        const field = get(_fields, name);\n        if (field && field._f) {\n          const inputRef = Array.isArray(field._f.refs)\n            ? field._f.refs[0]\n            : field._f.ref;\n\n          try {\n            isHTMLElement(inputRef) && inputRef.closest('form')!.reset();\n            break;\n          } catch {}\n        }\n      }\n    }\n\n    if (!keepStateOptions.keepDefaultValues) {\n      _defaultValues = { ...updatedValues };\n    }\n\n    if (!keepStateOptions.keepValues) {\n      _fields = {};\n\n      _subjects.control.next({\n        values: keepStateOptions.keepDefaultValues\n          ? _defaultValues\n          : { ...updatedValues },\n      });\n\n      _subjects.watch.next({});\n\n      _subjects.array.next({\n        values,\n      });\n    }\n\n    _names = {\n      mount: new Set(),\n      unMount: new Set(),\n      array: new Set(),\n      watch: new Set(),\n      watchAll: false,\n      focus: '',\n    };\n\n    _subjects.state.next({\n      submitCount: keepStateOptions.keepSubmitCount\n        ? _formState.submitCount\n        : 0,\n      isDirty: keepStateOptions.keepDirty\n        ? _formState.isDirty\n        : keepStateOptions.keepDefaultValues\n        ? deepEqual(formValues, _defaultValues)\n        : false,\n      isSubmitted: keepStateOptions.keepIsSubmitted\n        ? _formState.isSubmitted\n        : false,\n      dirtyFields: keepStateOptions.keepDirty ? _formState.dirtyFields : {},\n      touchedFields: keepStateOptions.keepTouched\n        ? _formState.touchedFields\n        : {},\n      errors: keepStateOptions.keepErrors ? _formState.errors : {},\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n    });\n\n    _isMounted = !!keepStateOptions.keepIsValid;\n  };\n\n  const setFocus: UseFormSetFocus<TFieldValues> = (name) =>\n    get(_fields, name)._f.ref.focus();\n\n  const _removeFields = () => {\n    for (const name of _names.unMount) {\n      const field = get(_fields, name) as Field;\n\n      field &&\n        (field._f.refs ? field._f.refs.every(live) : live(field._f.ref)) &&\n        unregister(name as FieldPath<TFieldValues>);\n    }\n\n    _names.unMount = new Set();\n  };\n\n  return {\n    control: {\n      register,\n      unregister,\n      _getWatch,\n      _getIsDirty,\n      _updateValid,\n      _updateValues,\n      _removeFields,\n      _updateFieldArray,\n      _getFieldArrayValue,\n      _subjects,\n      _shouldUnregister: formOptions.shouldUnregister,\n      _proxyFormState,\n      get _fields() {\n        return _fields;\n      },\n      set _fields(value) {\n        _fields = value;\n      },\n      get _formValues() {\n        return _formValues;\n      },\n      set _formValues(value) {\n        _formValues = value;\n      },\n      get _isMounted() {\n        return _isMounted;\n      },\n      set _isMounted(value) {\n        _isMounted = value;\n      },\n      get _defaultValues() {\n        return _defaultValues;\n      },\n      set _defaultValues(value) {\n        _defaultValues = value;\n      },\n      get _names() {\n        return _names;\n      },\n      set _names(value) {\n        _names = value;\n      },\n      get _isInAction() {\n        return _isInAction;\n      },\n      set _isInAction(value) {\n        _isInAction = value;\n      },\n      get _formState() {\n        return _formState;\n      },\n      set _formState(value) {\n        _formState = value;\n      },\n      _updateProps: (options) => {\n        formOptions = { ...defaultOptions, ...options };\n      },\n    },\n    trigger,\n    register,\n    handleSubmit,\n    watch,\n    setValue,\n    getValues,\n    reset,\n    clearErrors,\n    unregister,\n    setError,\n    setFocus,\n  };\n}\n","import * as React from 'react';\n\nimport { createFormControl } from './logic/createFormControl';\nimport getProxyFormState from './logic/getProxyFormState';\nimport shouldRenderFormState from './logic/shouldRenderFormState';\nimport { FieldValues, FormState, UseFormProps, UseFormReturn } from './types';\n\nexport function useForm<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object,\n>(\n  props: UseFormProps<TFieldValues, TContext> = {},\n): UseFormReturn<TFieldValues, TContext> {\n  const _formControl = React.useRef<\n    UseFormReturn<TFieldValues, TContext> | undefined\n  >();\n  const [formState, updateFormState] = React.useState<FormState<TFieldValues>>({\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {},\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {},\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    errors: {},\n  });\n\n  if (_formControl.current) {\n    _formControl.current.control._updateProps(props);\n  } else {\n    _formControl.current = {\n      ...createFormControl(props),\n      formState,\n    };\n  }\n\n  const control = _formControl.current.control;\n\n  React.useEffect(() => {\n    const formStateSubscription = control._subjects.state.subscribe({\n      next(formState) {\n        if (shouldRenderFormState(formState, control._proxyFormState, true)) {\n          control._formState = {\n            ...control._formState,\n            ...formState,\n          };\n\n          updateFormState({ ...control._formState });\n        }\n      },\n    });\n\n    return () => {\n      formStateSubscription.unsubscribe();\n    };\n  }, [control]);\n\n  React.useEffect(() => {\n    if (!control._isMounted) {\n      control._isMounted = true;\n      control._proxyFormState.isValid && control._updateValid();\n      !props.shouldUnregister && control._updateValues(control._defaultValues);\n    }\n    control._removeFields();\n  });\n\n  _formControl.current.formState = getProxyFormState(\n    formState,\n    control._proxyFormState,\n  );\n\n  return _formControl.current;\n}\n"],"sourceRoot":""}